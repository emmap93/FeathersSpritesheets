package {	import starling.events.Event;	import starling.display.Sprite;	import feathers.controls.Button;
	import feathers.controls.Screen;	import feathers.controls.Screen;	import feathers.controls.Panel;	import feathers.controls.ImageLoader;	import feathers.controls.TabBar;	import feathers.layout.VerticalLayout;	import feathers.layout.VerticalLayoutData;	import feathers.layout.HorizontalLayout;	import feathers.layout.AnchorLayout;	import feathers.layout.AnchorLayoutData;	import feathers.themes.MetalWorksMobileTheme;	import feathers.events.FeathersEventType;	import starling.textures.Texture;	import starling.textures.TextureAtlas;	import starling.display.Image;
	import feathers.motion.transitions.ScreenFadeTransitionManager;
	import feathers.data.ListCollection;
	
	
	//For sound
	import flash.media.Sound;
	import flash.media.SoundChannel;
	import starling.utils.AssetManager;
	public class Main extends Screen	{		// Embed the Atlas XML.		// Essentially what the following two lines do is "convert" the SpriteSheet.xml		// file to a class that contains the information within the file.		[Embed(source = "SpriteSheet.xml",mimeType = "application/octet-stream")]		public static const ATLAS_XML:Class;		// Embed the Atlas Texture:		// Essentially what the following two lines do is "convert" the SpriteSheetTextures.png		// file to a class that contains the information within the file (Bitmap data)		[Embed(source = "SpriteSheetTextures.png")]		public static const ATLAS_TEXTURE:Class;		// Declare some class properties		private var atlas:TextureAtlas;		private var atlasTexture:Texture;		private var bgTexture:Texture;		private var bgImgLoader:ImageLoader;
		
		//For sound
		private var assetMgr:AssetManager;				protected var button:Button;		private var contentPanel:Panel;		private var buttonPanel:Panel;		public function Main()		{			// constructor code			super();						this.addEventListener(FeathersEventType.INITIALIZE, initializeHandler);		}		private function initializeHandler(e:Event):void		{			this.removeEventListener(FeathersEventType.INITIALIZE, initializeHandler);			this.stage.addEventListener(Event.RESIZE, stageResized);			new MetalWorksMobileTheme();						/*			 *	Set the layout of the screen to AnchorLayout. Read all			 *	about it here http://wiki.starling-framework.org/feathers/anchor-layout			 *			 */			var screenLayout:AnchorLayout = new AnchorLayout();			this.layout = screenLayout;						/*			 *	Set the width and the height of this screen to be the			 *	same as the stage.			 */			this.height = this.stage.stageHeight;			this.width = this.stage.stageWidth;			// create an atlas Texture from the png data we have			// "converted into" a class			atlasTexture = Texture.fromBitmap(new ATLAS_TEXTURE());						// Create an xml object from the XML file we "converted into"			// a class			var xml:XML = XML(new ATLAS_XML());						// Create an atlas (aka spritesheet) using both the Texture			// and the XML file			atlas = new TextureAtlas(atlasTexture,xml);						// Create a Panel into which we can put buttons			this.buttonPanel = new Panel();						/*			 *	Create AnchorLayoutData that we can use to position the button			 *	panel.			 */			var buttonPanelLayoutData:AnchorLayoutData = new AnchorLayoutData();			buttonPanelLayoutData.left = 10;			buttonPanelLayoutData.right = 10;			buttonPanelLayoutData.bottom = 10;						// Now set the layoutData property of teh buttonPable to be our newly			// created buttonPanelLayoutData.			this.buttonPanel.layoutData = buttonPanelLayoutData;						// Now create a HorizontalLayout that we can use to layout the 			// buttons we place inside the buttonPanel			var buttonPanalLayout:HorizontalLayout = new HorizontalLayout();			buttonPanalLayout.horizontalAlign = HorizontalLayout.HORIZONTAL_ALIGN_CENTER;						// Now set the layout property (as opposed to the layoutData property			// we set above) to our newly created buttonPanalLayout			this.buttonPanel.layout = buttonPanalLayout;						// Add the buttonPanel to this Screen			this.addChild(this.buttonPanel);						// Create a panel that we can place "content" in			this.contentPanel = new Panel();						// Once again, position and size the contentPanel using a			// AnchorLayoutData object			var contentPanelLayoutData:AnchorLayoutData = new AnchorLayoutData();			contentPanelLayoutData.top = 10;			contentPanelLayoutData.bottom = 10;			contentPanelLayoutData.left = 10;			contentPanelLayoutData.right = 10;						// Set the display object that the bottom property above should be 			// relative to. That is, above we said that the contentPanel should be			// layed out 10px from the bottom. The bottom of what? Well it defaults			// to the bottom of the screen. However the line below changes that so that 			// the bottom of contentPanel is 10px above the buttonPanel			contentPanelLayoutData.bottomAnchorDisplayObject = this.buttonPanel;			contentPanel.layoutData = contentPanelLayoutData;						this.addChild(contentPanel);									// display a sub-texture aka load and display a sprite from the			// spritesheet.						// Get a sprite (aka texture)			bgTexture = atlas.getTexture("Sprite_1");						// Create an ImageLoader object. You display an ImageLoader object NOT			// a texture. What you do is place a texture into the ImageLoader object.			bgImgLoader = new ImageLoader();			bgImgLoader.source = bgTexture;			bgImgLoader.width = this.stage.stageWidth;			bgImgLoader.maintainAspectRatio=true;			contentPanel.addChild(bgImgLoader);			this.button = new Button();			this.button.label = "Click Me";			this.button.addEventListener(Event.TRIGGERED, button_triggeredHandler);			//add the button to the display list, just like you would with any;			//other Starling display object. this is where the theme give some			//skins to the button.			this.buttonPanel.addChild(this.button);		}		/**		 * Listener for the Button's Event.TRIGGERED event.		 */		protected function button_triggeredHandler(event:Event):void		{			// Display a different sprite			bgImgLoader.source = atlas.getTexture("Sprite_2");					}		protected function stageResized(e:Event):void		{			this.height = this.stage.stageHeight;			this.width = this.stage.stageWidth;			bgImgLoader.width = this.width;		}	}}